{
  "version": 3,
  "sources": ["../lib/index.ts"],
  "sourcesContent": [
    "export const IndexedRedis = <T>(dbName: string) => {\n\tconst isHaveIndexedDb = typeof window.indexedDB !== \"undefined\";\n\tif (!isHaveIndexedDb) {\n\t\tconsole.error(\n\t\t\t\"[nano-indexed] [Error] Your browser not have indexedDB, Now use localStorage.\",\n\t\t);\n\t}\n\tlet db: IDBDatabase;\n\tlet lastClearTime = 0;\n\n\tconst initDb = () => {\n\t\treturn new Promise((res) => {\n\t\t\tif (!db) {\n\t\t\t\tconst reqDb = window.indexedDB.open(dbName);\n\t\t\t\treqDb.onerror = console.error;\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\treqDb.onsuccess = (event: any) => {\n\t\t\t\t\tif (!db) {\n\t\t\t\t\t\tdb = event.target.result;\n\t\t\t\t\t}\n\t\t\t\t\tres(void 0);\n\t\t\t\t};\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\treqDb.onupgradeneeded = (event: any) => {\n\t\t\t\t\tif (!db) {\n\t\t\t\t\t\tdb = event.target.result;\n\t\t\t\t\t}\n\t\t\t\t\tdb.createObjectStore(dbName, { autoIncrement: false });\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tres(void 0);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst get = async <K extends keyof T>(key: K): Promise<T[K] | undefined> => {\n\t\tclearExpiredItems();\n\t\tif (!isHaveIndexedDb) {\n\t\t\treturn new Promise((res) => {\n\t\t\t\tlet data = localStorage.getItem(`[${dbName}] ${key as string}`);\n\t\t\t\tif (data) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst obj = JSON.parse(data);\n\t\t\t\t\t\tdata = obj?.value;\n\t\t\t\t\t\tif (obj?.expire && obj.expire < Date.now()) {\n\t\t\t\t\t\t\tlocalStorage.removeItem(`[${dbName}] ${key as string}`);\n\t\t\t\t\t\t\tres(void 0);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {}\n\t\t\t\t}\n\t\t\t\tif (data === void 0 || data === null) {\n\t\t\t\t\tres(void 0);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\tres(data as any);\n\t\t\t});\n\t\t}\n\t\tif (!db) {\n\t\t\tawait initDb();\n\t\t}\n\t\treturn new Promise((res) => {\n\t\t\tif (db.objectStoreNames.contains(dbName)) {\n\t\t\t\tconst transaction = db.transaction([dbName]);\n\t\t\t\tconst objectStore = transaction.objectStore(dbName);\n\t\t\t\tconst request = objectStore.get(key as string);\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\trequest.onsuccess = (event: any) => {\n\t\t\t\t\tconst data = event.target.result;\n\t\t\t\t\tres(data?.value);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tres(void 0);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst getAll = async (): Promise<Partial<T>> => {\n\t\t// 获取所有数据\n\t\tif (!isHaveIndexedDb) {\n\t\t\treturn new Promise((res) => {\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\tconst out = {} as any;\n\t\t\t\tconst now = Date.now();\n\t\t\t\tfor (let i = 0; i < localStorage.length; i++) {\n\t\t\t\t\tconst key = localStorage.key(i) || \"\";\n\t\t\t\t\tif (key.indexOf(`[${dbName}] `) === 0) {\n\t\t\t\t\t\tconst itemStr = localStorage.getItem(key);\n\t\t\t\t\t\tif (itemStr) {\n\t\t\t\t\t\t\tlet item: { expiry: number; value: unknown };\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\titem = JSON.parse(itemStr);\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t// eslint-disable-next-line no-continue\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (now > item.expiry) {\n\t\t\t\t\t\t\t\tlocalStorage.removeItem(key);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout[key.replace(`[${dbName}] `, \"\")] = item.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst keys = Object.keys(localStorage);\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\tres(out as any);\n\t\t\t});\n\t\t}\n\t\tif (!db) {\n\t\t\tawait initDb();\n\t\t}\n\t\treturn new Promise((res) => {\n\t\t\tif (db.objectStoreNames.contains(dbName)) {\n\t\t\t\tconst transaction = db.transaction([dbName]);\n\t\t\t\tconst objectStore = transaction.objectStore(dbName);\n\t\t\t\tconst request = objectStore.getAll();\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\trequest.onsuccess = (event: any) => {\n\t\t\t\t\tconst data = event.target.result;\n\t\t\t\t\t// 这里要组合成 key value\n\t\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\t\tconst out: any = {};\n\t\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\t\tdata.forEach((v: any) => {\n\t\t\t\t\t\tObject.keys(v).forEach((key) => {\n\t\t\t\t\t\t\tif (key !== \"value\") {\n\t\t\t\t\t\t\t\tif (v.expire && v.expire < Date.now()) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tout[key] = v.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tres(out);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tres({} as Partial<T>);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst setEx = async <K extends keyof T>(\n\t\tkey: K,\n\t\texpireSecond: number,\n\t\tobj: T[K],\n\t): Promise<T[K]> => {\n\t\tclearExpiredItems();\n\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\tconst theObj = obj as any;\n\t\tif (!isHaveIndexedDb) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\tlocalStorage.setItem(\n\t\t\t\t\t`[${dbName}] ${key as string}`,\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tvalue: theObj,\n\t\t\t\t\t\texpire: expireSecond ? Date.now() + expireSecond * 1000 : 0,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tres(obj);\n\t\t\t});\n\t\t}\n\t\tif (!db) {\n\t\t\tawait initDb();\n\t\t}\n\t\treturn new Promise((res) => {\n\t\t\tif (db.objectStoreNames.contains(dbName)) {\n\t\t\t\tconst transaction = db.transaction([dbName], \"readwrite\");\n\t\t\t\tconst objectStore = transaction.objectStore(dbName);\n\t\t\t\tconst data = {\n\t\t\t\t\t[key]: key,\n\t\t\t\t\tvalue: theObj,\n\t\t\t\t\texpire: expireSecond ? Date.now() + expireSecond * 1000 : 0,\n\t\t\t\t};\n\t\t\t\tconst request = objectStore.put(data, key as \"string\");\n\t\t\t\trequest.onerror = (err) => {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tres(obj);\n\t\t\t\t};\n\t\t\t\trequest.onsuccess = () => {\n\t\t\t\t\tres(obj);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tres(obj);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst assign = async <K extends keyof T>(\n\t\tkey: keyof T,\n\t\tobj: T[K],\n\t): Promise<T[typeof key]> => {\n\t\tif (typeof obj !== \"object\") {\n\t\t\tthrow new Error(\"[NanoIndexed.assign] assign need is object\");\n\t\t}\n\t\tconst old = await out.get(key);\n\t\tif (!old) {\n\t\t\tawait out.set(key, obj);\n\t\t\treturn obj;\n\t\t}\n\t\tif (typeof old !== \"object\") {\n\t\t\treturn old;\n\t\t}\n\t\tconst next = Object.assign(old, obj);\n\t\tawait out.set(key, next);\n\t\treturn next;\n\t};\n\n\tconst remove = async <K extends keyof T>(\n\t\tkey: K,\n\t): Promise<T[K] | undefined> => {\n\t\tif (!isHaveIndexedDb) {\n\t\t\treturn new Promise((res) => {\n\t\t\t\tlocalStorage.removeItem((key || 1).toString());\n\t\t\t\tres(void 0);\n\t\t\t});\n\t\t}\n\t\tif (!db) {\n\t\t\tawait initDb();\n\t\t}\n\n\t\treturn new Promise((res) => {\n\t\t\tif (db.objectStoreNames.contains(dbName)) {\n\t\t\t\tconst transaction = db.transaction([dbName], \"readwrite\");\n\t\t\t\tconst objectStore = transaction.objectStore(dbName);\n\t\t\t\tconst request = objectStore.delete(key as \"string\");\n\t\t\t\trequest.onerror = (err) => {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tres(void 0);\n\t\t\t\t};\n\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\t\trequest.onsuccess = res as any;\n\t\t\t} else {\n\t\t\t\tres(void 0);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst clearExpiredItems = async (force = false) => {\n\t\tconst now = Date.now();\n\t\tif (!force && lastClearTime && now - lastClearTime < 60 * 1000 * 5) {\n\t\t\t// Less than 5 minutes has passed since the last clear, so we do nothing\n\t\t\treturn;\n\t\t}\n\t\tlastClearTime = now;\n\n\t\treturn getAll();\n\t};\n\n\tclearExpiredItems();\n\n\tconst out = {\n\t\tsetEx: async <K extends keyof T>(\n\t\t\tkey: K,\n\t\t\texpireSecond: number,\n\t\t\tobj: T[K],\n\t\t) => {\n\t\t\treturn setEx(key, expireSecond, obj);\n\t\t},\n\t\tset: async <K extends keyof T>(key: K, obj: T[K]) => {\n\t\t\treturn setEx(key, 0, obj);\n\t\t},\n\t\tget,\n\t\tgetAll,\n\t\tassign,\n\t\tremove,\n\t\tclearExpiredItems,\n\t};\n\treturn out;\n};\n"
  ],
  "mappings": "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",
  "debugId": "D75DC001B945F33464756e2164756e21",
  "names": []
}