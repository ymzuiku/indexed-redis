// Generated by dts-bundle-generator v8.1.2

export interface IndexedRedisOptions<T> {
	dbName: string;
	defaultValue: T;
	optimisticDelay?: number;
	ignoreCache?: boolean;
	onlyUseLocalStorage?: boolean;
	setFormat?: (value: any) => any | Promise<any>;
	getFormat?: (value: any) => any | Promise<any>;
}
export type IndexedRedis<T> = ReturnType<typeof IndexedRedis<T>>;
export declare function IndexedRedis<T>(options: IndexedRedisOptions<T>): {
	get: <K extends keyof T>(key: K) => Promise<T[K]>;
	setEx: <K_1 extends keyof T>(key: K_1, expireMillisecond: number, value: T[K_1]) => Promise<void>;
	set: (key: keyof T, value: T[keyof T]) => Promise<void>;
	assign: <K_2 extends keyof T>(key: K_2, value: Partial<T[K_2]>) => Promise<Partial<T[K_2]>>;
	assignEx: <K_3 extends keyof T>(key: K_3, expireMillisecond: number, value: Partial<T[K_3]>) => Promise<Partial<T[K_3]>>;
	del: <K_4 extends keyof T>(key: K_4) => Promise<void>;
	getAll: () => Promise<T>;
	flushDb: () => Promise<void>;
	getDefaultValue: <K_5 extends keyof T>(key: K_5) => T[K_5];
};

export {};
